// This policy checks whether an 'aws_cloudfront_distribution' with an Amazon S3 origin has 'aws_cloudfront_origin_access_control' configured.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

// Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

// Constants

const = {
	"policy_name": "cloudfront-s3-origin-access-control-enabled",
	"message":     "'aws_cloudfront_distribution' with an Amazon S3 origin has 'aws_cloudfront_origin_access_control' should have configured. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/cloudfront-controls.html#cloudfront-13 for more details.",
	"resource_aws_cloudfront_distribution": "aws_cloudfront_distribution",
}

// Functions

get_origin_access_violations = func(res) {
	origin_access_control_origin_type = maps.get(res[0].config, "origin_access_control_origin_type", {})
	if origin_access_control_origin_type is empty {
		return false
	}
	value = maps.get(origin_access_control_origin_type, "constant_value", "")
	return value == "s3"
}

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		origin = maps.get(res.config, "origin", [])
		if origin is empty {
			return false
		}
		origin_access_control_id = maps.get(origin[0], "origin_access_control_id", [])
		if origin_access_control_id is empty {
			return false
		}
		references = maps.get(origin_access_control_id, "references", [])
		if references is empty {
			return false
		}
		for references as ref {
			ref_split = strings.split(ref, ".")
			if ref_split is empty or length(ref_split) < 2 {
				return false
			}
			origin_access_control = ref_split[0] + "." + ref_split[1]
			origin_access_control_resource = tf.config(tfconfig.resources).address(origin_access_control).resources
			if origin_access_control_resource is empty {
				return false
			}
			violation = get_origin_access_violations(origin_access_control_resource)
			if !violation {
				return false
			}
		}
		return true
	})
}

// Variables

config_resources = tf.config(tfconfig.resources)
cloudfront_distribution_resource = config_resources.type(const.resource_aws_cloudfront_distribution).resources

violations = get_violations(cloudfront_distribution_resource)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

// Outputs

print(report.generate_policy_report(summary))

// Rules

main = rule {
	violations is empty
}
