# This policy requires EFS file systems to have automatic backups enabled

// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                    "efs-automatic-backups-enabled",
	"message":                        "EFS file systems should have automatic backups enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/efs-controls.html#efs-7 for more details.",
	"resource_aws_efs_file_system":   "aws_efs_file_system",
	"resource_aws_efs_backup_policy": "aws_efs_backup_policy",
}

// Functions

get_all_efs_file_systems = func(resources) {
	efs_file_system_resources = {}

	for resources as res {
		if res.type is const.resource_aws_efs_file_system {
			efs_file_system_resources[res.address] = {
				"address":        res.address,
				"module_address": res.module_address,
				"message":        const.message,
			}
		}
	}

	return efs_file_system_resources
}

get_violations = func(resources, efs_file_system_resources) {
	for resources as res {
		file_system_id = maps.get(res.config, "file_system_id", {})
		references = maps.get(file_system_id, "references", [])
		backup_policy = maps.get(res.config, "backup_policy", [])
		backup_status = maps.get(backup_policy[0], "status", {})
		backup_status_value = maps.get(backup_status, "constant_value", "")

		if backup_status_value is "DISABLED" {
			continue
		}

		for references as ref {
			if ref in efs_file_system_resources {
				delete(efs_file_system_resources, ref)
				break
			}
		}
	}

	values = []
	for efs_file_system_resources as key, value {
		append(values, value)
	}

	return values
}

// Variables

config_resources = tf.config(tfconfig.resources)

efs_file_system = config_resources.type(const.resource_aws_efs_file_system).resources
efs_backup_policy = config_resources.type(const.resource_aws_efs_backup_policy).resources

efs_file_system_resources = get_all_efs_file_systems(efs_file_system)
violations = get_violations(efs_backup_policy, efs_file_system_resources)

summary = {
	"policy_name": const.policy_name,
	"violations":  violations,
}

// Outputs

print(report.generate_policy_report(summary))

// Rules

main = rule {
	violations is empty
}
