# This policy requires resources of type `aws_appsync_api_cache` should have 'at_rest_encryption_enabled' should be set to true and 'api_id' should be referenced to `aws_appsync_graphql_api` resource.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants

const = {
	"policy_name":                      "appsync-graphqlapi-cache-should-be-encrypted-at-rest",
	"message":                          "AWS AppSync API caches should be encrypted at rest. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/appsync-controls.html#appsync-1 for more details.",
	"resource_aws_appsync_api_cache":   "aws_appsync_api_cache",
	"resource_aws_appsync_graphql_api": "aws_appsync_graphql_api",
	"at_rest_encryption_enabled":       "at_rest_encryption_enabled",
	"references":                       "references",
	"address":                          "address",
	"module_prefix":                    "module.",
}

# Functions

# Removes module address prefix from a resource
# and returns back the localized address for a module.
resource_address_without_module_address = func(res) {
	resource_addr = res[const.address]

	# Check for root module
	if not strings.has_prefix(resource_addr, const.module_prefix) {
		return resource_addr
	}

	module_addr_prefix = res[const.module_address] + "."
	return strings.trim_prefix(resource_addr, module_addr_prefix)
}

get_complaint_resources = func(appsync_api_cache_resources) {
	if appsync_api_cache_resources is null or appsync_api_cache_resources is empty {
		return null
	}
	return collection.reject(appsync_api_cache_resources, func(res) {
		encryption_at_rest_values = maps.get(res.config, const.at_rest_encryption_enabled, null)
		if encryption_at_rest_values is null or encryption_at_rest_values is empty {
			return true
		}
		return maps.get(encryption_at_rest_values, "constant_value", false) is not true
	})
}

# Variables

appsync_api_cache_resources = tf.config(tfconfig.resources).type(const.resource_aws_appsync_api_cache).resources
appsync_graphql_api_resources = tf.config(tfconfig.resources).type(const.resource_aws_appsync_graphql_api).resources

appsync_api_cache_complaint = get_complaint_resources(appsync_api_cache_resources)
violations = []

if appsync_api_cache_complaint is null {
	violations = appsync_graphql_api_resources
} else {
	# Get the api_id references from the complaint resources
	appsync_api_cache_addresses = map appsync_api_cache_complaint as _, res {
		res.config.api_id.references[1]
	}

	violations = filter appsync_graphql_api_resources as _, res {
		resource_address_without_module_address(res) not in appsync_api_cache_addresses
	}
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
