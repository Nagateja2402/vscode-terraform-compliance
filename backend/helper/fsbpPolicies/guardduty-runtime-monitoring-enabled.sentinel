# This policy requires GuardDuty Runtime Monitoring to be enabled

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                             "guardduty-runtime-monitoring-enabled",
	"message":                                 "GuardDuty Runtime Monitoring should be enabled. Ensure that GuardDuty detector is enabled and Runtime Monitoring feature is enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/guardduty-controls.html#guardduty-11 for more details.",
	"resource_aws_guardduty_detector":         "aws_guardduty_detector",
	"resource_aws_guardduty_detector_feature": "aws_guardduty_detector_feature",
}

# Variables

detector_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_guardduty_detector).resources
feature_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_guardduty_detector_feature).resources

# Check if GuardDuty detector is enabled
detector_violations = collection.reject(detector_resources, func(res) {
	return maps.get(res, "values.enable", true) is true
})

# Check if Runtime Monitoring feature is enabled
feature_violations = collection.reject(feature_resources, func(res) {
	return maps.get(res, "values.name", "") == "RUNTIME_MONITORING" and
		maps.get(res, "values.status", "") == "ENABLED"
})

violations = detector_violations + feature_violations

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
