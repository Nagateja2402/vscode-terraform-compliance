# This control checks whether 'aws_guardduty_detector' and 'aws_guardduty_detector_feature' have Malware Protection enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                             "guardduty-malware-protection-enabled",
	"resource_aws_guardduty_detector":         "aws_guardduty_detector",
	"resource_aws_guardduty_detector_feature": "aws_guardduty_detector_feature",
	"message": "'aws_guardduty_detector' and 'aws_guardduty_detector_feature' should have Malware Protection enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/guardduty-controls.html#guardduty-8 for more details.",
}

# Functions

get_detector_violations = func(resources, feature_resource) {
	return collection.reject(resources, func(res) {
		data_sources = maps.get(res.config, "datasources", [])
		if data_sources is empty {
			feature_violations = get_feature_violations(feature_resource, res.address)
			return feature_violations is empty
		}
		malware_protection = maps.get(data_sources[0], "malware_protection", [])
		if malware_protection is empty {
			feature_violations = get_feature_violations(feature_resource, res.address)
			return feature_violations is empty
		}
		ebs_protection = maps.get(malware_protection[0], "scan_ec2_instance_with_findings", [])
		ebs_volumes = maps.get(ebs_protection[0], "ebs_volumes", [])
		return maps.get(ebs_volumes[0], "enable.constant_value", false) is true
	})
}

get_feature_violations = func(resources, detector_address) {
	if resources is empty {
		return [{}]
	}
	return collection.reject(resources, func(res) {
		detector_id = maps.get(res.config, "detector_id", {})
		if maps.get(detector_id, "references", []) not contains detector_address {
			return false
		}
		name = maps.get(res.config, "name.constant_value", "")
		if name is not "EBS_MALWARE_PROTECTION" {
			return false
		}
		return maps.get(res.config, "status.constant_value", "ENABLED") is "ENABLED"
	})
}

# Variables

aws_guardduty_detector = tf.config(tfconfig.resources).type(const.resource_aws_guardduty_detector).resources
aws_guardduty_detector_feature = tf.config(tfconfig.resources).type(const.resource_aws_guardduty_detector_feature).resources
violations = get_detector_violations(aws_guardduty_detector, aws_guardduty_detector_feature)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
