# This control checks whether an Amazon S3 Multi-Region Access Point has block public access settings enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "s3-multi-region-access-points-should-have-block-public-access-settings-enabled",
	"message":     "S3 Multi-Region Access Points should have block public access settings enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/s3-controls.html#s3-24 for more details.",
	"resource_aws_s3control_multi_region_access_point": "aws_s3control_multi_region_access_point",
	"public_access_block_checks": [
		"block_public_acls",
		"block_public_policy",
		"ignore_public_acls",
		"restrict_public_buckets",
	],
}

# Functions

is_public_access_block_compliant = func(values) {
	details = maps.get(values, "details", [])
	if details is null or details is [] {
		return false
	}
	for details as detail {
		public_access_block = maps.get(detail, "public_access_block", [])
		if public_access_block is [] or public_access_block is null {
			return false
		}

		for public_access_block as block {
			for const.public_access_block_checks as check {
				if not maps.has(block, check) {
					return false
				}
				if maps.get(block, check, false) is false {
					return false
				}
			}
		}
	}
	return true
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_s3control_multi_region_access_point).resources

violations = collection.reject(resources, func(res) {
	values = maps.get(res, "values", {})
	return is_public_access_block_compliant(values)
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
