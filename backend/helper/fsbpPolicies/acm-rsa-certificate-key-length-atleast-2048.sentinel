# This policy requires resources of type `aws_acm_certificate` with rsa key algorithm should have atleast 2048 bits key length.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps
import "strings"

# Constants

const = {
	"policy_name":                  "acm-rsa-certificate-key-length-atleast-2048",
	"message":                      "ACM Certificate should have at least 2048 bits key length for rsa algorithm. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/acm-controls.html#acm-2 for more details.",
	"resource_aws_acm_certificate": "aws_acm_certificate",
	"key_algorithm":                "key_algorithm",
	"min_key_length":               2048,
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_acm_certificate).resources

violations = collection.reject(resources, func(res) {
	key_algorithm = maps.get(res, "values.key_algorithm", null)
	if key_algorithm is null {
		return false
	}

	rsa_pattern = "RSA_(\\d+)"
	if key_algorithm not matches rsa_pattern {
		return true
	}

	key_length = strings.split(key_algorithm, "_")[1]
	key_length = int(key_length)

	return key_length >= const.min_key_length
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
