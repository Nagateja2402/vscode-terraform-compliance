# This control checks whether an Amazon RDS for PostgreSQL DB instance is configured to publish logs to Amazon CloudWatch Logs.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":              "rds-postgresql-logs-to-cloudwatch",
	"message":                  "RDS for PostgreSQL DB instances should publish logs to CloudWatch Logs. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-36 for more details.",
	"resource_aws_db_instance": "aws_db_instance",
	"db_postgres":              "postgres",
	"db_postgresql":            "postgresql",
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_instance).resources
violations = collection.reject(resources, func(res) {
	# Check if the engine is PostgreSQL
	engine = maps.get(res, "values.engine", "")
	if engine != const.db_postgres and engine != const.db_postgresql {
		return false
	}

	# Check if logs are exported to CloudWatch
	log_exports = maps.get(res, "values.enabled_cloudwatch_logs_exports", [])

	return log_exports is not null and
		log_exports is not [] and
		const.db_postgresql in log_exports
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
