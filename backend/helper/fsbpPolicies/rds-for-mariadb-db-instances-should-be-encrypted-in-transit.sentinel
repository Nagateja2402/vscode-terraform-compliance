# This control checks whether connections to an Amazon RDS for MariaDB DB instance are encrypted in transit

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                     "rds-for-mariadb-db-instances-should-be-encrypted-in-transit",
	"message":                         "RDS for MariaDB DB instances should be encrypted in transit. The parameter 'rds.require_secure_transport' must be set to 1 (ON) in the associated parameter group. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-44 for more details.",
	"resource_aws_db_instance":        "aws_db_instance",
	"resource_aws_db_parameter_group": "aws_db_parameter_group",
	"engine":                     "engine",
	"parameter_group_name":       "parameter_group_name",
	"parameter":                  "parameter",
	"mariadb_engine":             "mariadb",
	"secure_transport_parameter": "require_secure_transport",
}

# Functions

get_compliant_parameter_groups = func(parameter_groups) {
	compliant_parameter_groups = {}
	for parameter_groups as pg {
		parameters = maps.get(pg, "values.parameter", [])
		for parameters as parameter {
			if maps.get(parameter, "name", "") == const.secure_transport_parameter and
				(maps.get(parameter, "value", "") == "1" or maps.get(parameter, "value", "") == "ON") {
				compliant_parameter_groups[pg.values.name] = true
			}
		}
	}
	return compliant_parameter_groups
}

# Variables

db_instances = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_instance).resources
parameter_groups = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_parameter_group).resources

# Find MariaDB instances
mariadb_instances = collection.filter(db_instances, func(res) {
	return maps.get(res, "values.engine", "") == const.mariadb_engine
})

# Check if parameter groups have secure transport enabled
compliant_parameter_groups = get_compliant_parameter_groups(parameter_groups)

# Find violations - MariaDB instances without secure transport
violations = collection.filter(mariadb_instances, func(instance) {
	pg_name = maps.get(instance, "values.parameter_group_name", "")

	return pg_name == "" or maps.get(compliant_parameter_groups, pg_name, false) != true
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
