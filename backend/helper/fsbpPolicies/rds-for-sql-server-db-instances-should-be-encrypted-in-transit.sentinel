# This control checks whether a connection to an Amazon RDS for Microsoft SQL Server DB instance is encrypted in transit.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                     "rds-for-sql-server-db-instances-should-be-encrypted-in-transit",
	"message":                         "RDS for SQL Server DB instances should be encrypted in transit. Ensure parameter group has rds.force_ssl=1 and is associated with SQL Server instances. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-41 for more details.",
	"resource_aws_db_parameter_group": "aws_db_parameter_group",
	"resource_aws_db_instance":        "aws_db_instance",
	"sql_server_engines":              ["sqlserver-ee", "sqlserver-se", "sqlserver-ex", "sqlserver-web"],
}

# Functions

# Check if parameter group has rds.force_ssl=1
is_parameter_group_compliant = func(res) {
	parameters = maps.get(res, "values.parameter", [])
	return any parameters as parameter {
		maps.get(parameter, "name", "") == "rds.force_ssl" and maps.get(parameter, "value", "") == "1"
	}
}

# Check if SQL Server instance is using a compliant parameter group
is_db_instance_compliant = func(db_instance, compliant_param_groups) {
	engine = maps.get(db_instance, "values.engine", "")

	# Only check SQL Server instances
	if engine not in const.sql_server_engines {
		return true
	}

	param_group_name = maps.get(db_instance, "values.parameter_group_name", "")

	# Check if the parameter group name is in our list of compliant groups
	return param_group_name in compliant_param_groups
}

get_compliant_param_groups = func(parameter_group_resources) {
	param_groups = []
	for parameter_group_resources as _, pg {
		if is_parameter_group_compliant(pg) {
			append(param_groups, pg.values.name)
		}
	}
	return param_groups
}

# Variables

parameter_group_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_parameter_group).resources
db_instance_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_db_instance).resources

# Find compliant parameter groups
compliant_param_groups = get_compliant_param_groups(parameter_group_resources)

# Find non-compliant DB instances
violations = collection.filter(db_instance_resources, func(db) {
	if not is_db_instance_compliant(db, compliant_param_groups) {
		return true
	}
	return false
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
