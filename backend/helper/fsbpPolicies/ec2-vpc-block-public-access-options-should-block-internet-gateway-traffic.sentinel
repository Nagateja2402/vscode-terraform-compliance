# This policy requires resources of type `aws_vpc_block_public_access_options` have attribute `internet_gateway_block_mode` should be either 'block-bidirectional' or 'block-ingress'.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name": "ec2-vpc-block-public-access-options-should-block-internet-gateway-traffic",
	"message":     "Attribute 'internet_gateway_block_mode' must be either 'block-bidirectional' or 'block-ingress' for 'aws_vpc_block_public_access_options' resources. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-172 for more details.",
	"resource_aws_vpc_block_public_access_options": "aws_vpc_block_public_access_options",
	"internet_gateway_block_mode":                  "internet_gateway_block_mode",
	"allowed_modes":                                ["block-bidirectional", "block-ingress"],
}

# Variables

resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_vpc_block_public_access_options).resources
violations = collection.reject(resources, func(res) {
	return maps.get(res.values, const.internet_gateway_block_mode, "") in const.allowed_modes
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
