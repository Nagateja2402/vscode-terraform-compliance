# This policy checks if resources of type 'aws_vpn_connection' have the cloudwatch logs
# enabled for both 'tunnel1' and 'tunnel2'

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

import "tfplan/v2" as tfplan
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"policy_name":                 "ec2-vpn-connection-logging-enabled",
	"message":                     "AWS Site-to-Site VPN Connection should have the AWS Cloudwatch logs enabled for both ends. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-171 for more details.",
	"resource_aws_vpn_connection": "aws_vpn_connection",
	"cloudwatch_log_options":      "cloudwatch_log_options",
	"log_enabled":                 "log_enabled",
}

# Functions

get_violations = func(resources) {
	return collection.reject(resources, func(res) {
		tunnel1_log_options_values = maps.get(res, "values.tunnel1_log_options", [])
		tunnel2_log_options_values = maps.get(res, "values.tunnel2_log_options", [])
		return check_logging_enabled_in_tunnel(tunnel1_log_options_values[0]) and check_logging_enabled_in_tunnel(tunnel2_log_options_values[0])
	})
}

check_logging_enabled_in_tunnel = func(log_values) {
	if log_values is empty or log_values is not defined {
		return false
	}
	cloudwatch_log_options_values = maps.get(log_values, const.cloudwatch_log_options, [])
	if cloudwatch_log_options_values is empty {
		return false
	}
	return maps.get(cloudwatch_log_options_values[0], const.log_enabled, false) is true
}

# Variables

vpn_connection_resources = tf.plan(tfplan.planned_values.resources).type(const.resource_aws_vpn_connection).resources
violations = get_violations(vpn_connection_resources)

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs
print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
